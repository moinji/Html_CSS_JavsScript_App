다음은 내가 해결해야하는 과제인 "[실습1-6 Html, CSS, JavaScript ] Book Html Form 화면과 JavaScript 작성하기 book-client-step06.html / form.css / form.js 1) book을 등록하는 createBook() 함수 작성하기 function createBook(bookData) { } 2) book을 삭제하는 deleteBook(bookId) 함수 작성하기 function deleteBook(bookId) { } 3) 변수 선언하기 // 현재 수정 중인 도서 ID let editingBookId = null; querySelector() 함수를 사용하여 submitButton 과 cancelButton 을 선언하기. 4) book을 수정하기 전에 데이터를 로드하는 editBook(bookId) 함수 작성하기 function editBook(bookId) { } 5) book을 수정 처리하는 함수 updateBook(bookId, bookData) 함수 작성하기 function updateBook(bookId, bookData) { } 6) 에러 메시지 출력 처리 수정하기 "에 대한 프롬프트이다.

실습1-6 (book-client-step06.html / form.css / form.js)에 대한 프롬프트에 따라 프로젝트를 완성하시오.

파일명은 각 코드블록 제목에 명시: book-client-step06.html, form.css, form.js.

공통 가정

API Base:

const API_BASE_URL = "http://localhost:8080";


REST:
GET /api/books, GET /api/books/{id}, POST /api/books, PUT /api/books/{id}, DELETE /api/books/{id}

에러 응답은 둘 다 처리:
{ "message": "..." } 또는 { "errors": { "title":"...", "isbn":"..." } }

1) book-client-step06.html

외부로 form.css, form.js 로드.

상단에 숨김 상태의 에러 박스 #errorBox[role="alert"], 성공 박스 #successBox.

폼(novalidate): 필드 id는 title, author, isbn, price, publishDate(date). 각 필드 아래 small.form-help.

버튼: #submitButton(초기 “등록”), #cancelButton(수정 모드에서만 보임).

목록 테이블: #bookTbody에 행 렌더(열: ID/제목/저자/ISBN/가격/출판일/액션[수정/삭제]).

2) form.css

기본 레이아웃: .form-container, .form-grid, .form-group, .table-container.

.is-invalid 테두리 강조, .form-help 빨간 소형 글자.

#errorBox 빨강 계열, #successBox 초록 계열, 기본 display:none;.

600px 이하 1열 반응형.

3) form.js

전역 상태 및 캐시:

const API_BASE_URL = "http://localhost:8080";
let editingBookId = null;
const submitButton = document.querySelector('#submitButton');
const cancelButton = document.querySelector('#cancelButton');
// 각 input도 querySelector로 캐시


초기화:

DOMContentLoaded에서 loadBooks()와 이벤트 바인딩.

폼 submit → preventDefault() → collectFormData() → editingBookId ? updateBook(...) : createBook(...)

cancelButton 클릭 → resetForm().

필수 함수(정확한 시그니처):

async function createBook(bookData) { ... }

POST /api/books, 실패 시 showError(...), 성공 시 showSuccess('등록 완료'), resetForm(), loadBooks().

async function deleteBook(bookId) { ... }

confirm 후 DELETE /api/books/{id} → 성공 시 showSuccess('삭제 완료') → loadBooks().

async function editBook(bookId) { ... }

GET /api/books/{id}로 폼 채우기, editingBookId=bookId, 제출 버튼 텍스트 “수정”, cancelButton 표시.

async function updateBook(bookId, bookData) { ... }

PUT /api/books/{id}, 성공 시 showSuccess('수정 완료') → resetForm() → loadBooks().

목록 렌더:

async function loadBooks() → GET /api/books → renderTable(books).

renderTable(books)는 #bookTbody 갱신, 수정/삭제 버튼에 클릭 핸들러 연결(이벤트 위임 가능).

유틸:

collectFormData() → { title, author, isbn, price:Number(...), publishDate:'YYYY-MM-DD' }.

resetForm() → 값 초기화, editingBookId=null, 버튼 “등록”, cancelButton 숨김, 에러/성공 숨김, 필드 에러 제거.

showError(x) → 문자열이면 #errorBox에 표시, 객체면 각 필드 .is-invalid와 .form-help 채움 + 상단 “입력을 확인하세요”.

showSuccess(msg) → #successBox 표시.

clearErrors() & httpErrorFromResponse(res) 구현.